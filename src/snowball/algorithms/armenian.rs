//! Generated by Snowball 2.1.0 - https://snowballstem.org/

#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(unused_variables)]
#![allow(unused_mut)]
use snowball::SnowballEnv;
use snowball::Among;

static A_0: &'static [Among<Context>; 23] = &[
    Among("\u{0562}\u{0561}\u{0580}", -1, 1, None),
    Among("\u{0580}\u{0578}\u{0580}\u{0564}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0578}\u{0580}\u{0564}", 1, 1, None),
    Among("\u{0561}\u{056C}\u{056B}", -1, 1, None),
    Among("\u{0561}\u{056F}\u{056B}", -1, 1, None),
    Among("\u{0578}\u{0580}\u{0561}\u{056F}", -1, 1, None),
    Among("\u{0565}\u{0572}", -1, 1, None),
    Among("\u{057E}\u{0578}\u{0582}\u{0576}", -1, 1, None),
    Among("\u{0561}\u{0580}\u{0561}\u{0576}", -1, 1, None),
    Among("\u{0561}\u{056F}\u{0561}\u{0576}", -1, 1, None),
    Among("\u{0565}\u{0576}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0565}\u{0576}", 10, 1, None),
    Among("\u{0565}\u{056F}\u{0565}\u{0576}", 10, 1, None),
    Among("\u{0578}\u{0580}\u{0567}\u{0576}", -1, 1, None),
    Among("\u{056B}\u{0576}", -1, 1, None),
    Among("\u{0563}\u{056B}\u{0576}", 14, 1, None),
    Among("\u{0578}\u{057E}\u{056B}\u{0576}", 14, 1, None),
    Among("\u{056C}\u{0561}\u{0575}\u{0576}", -1, 1, None),
    Among("\u{057A}\u{0565}\u{057D}", -1, 1, None),
    Among("\u{056B}\u{057E}", -1, 1, None),
    Among("\u{0561}\u{057F}", -1, 1, None),
    Among("\u{0561}\u{057E}\u{0565}\u{057F}", -1, 1, None),
    Among("\u{056F}\u{0578}\u{057F}", -1, 1, None),
];

static A_1: &'static [Among<Context>; 71] = &[
    Among("\u{0561}\u{0580}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{0561}\u{0580}", 0, 1, None),
    Among("\u{0565}\u{0581}\u{0561}\u{0580}", 0, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{056B}\u{0580}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{056B}\u{0580}", -1, 1, None),
    Among("\u{0565}\u{0581}\u{056B}\u{0580}", -1, 1, None),
    Among("\u{057E}\u{0565}\u{0581}\u{056B}\u{0580}", 5, 1, None),
    Among("\u{0561}\u{056C}\u{0578}\u{0582}\u{0581}", -1, 1, None),
    Among("\u{0565}\u{056C}\u{0578}\u{0582}\u{0581}", -1, 1, None),
    Among("\u{0561}\u{0581}", -1, 1, None),
    Among("\u{0565}\u{0581}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{0565}\u{0581}", 10, 1, None),
    Among("\u{0561}\u{056C}\u{0578}\u{0582}", -1, 1, None),
    Among("\u{0565}\u{056C}\u{0578}\u{0582}", -1, 1, None),
    Among("\u{0561}\u{0584}", -1, 1, None),
    Among("\u{0581}\u{0561}\u{0584}", 14, 1, None),
    Among("\u{0561}\u{0581}\u{0561}\u{0584}", 15, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{056B}\u{0584}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{056B}\u{0584}", -1, 1, None),
    Among("\u{0565}\u{0581}\u{056B}\u{0584}", -1, 1, None),
    Among("\u{057E}\u{0565}\u{0581}\u{056B}\u{0584}", 19, 1, None),
    Among("\u{0561}\u{0576}\u{0584}", -1, 1, None),
    Among("\u{0581}\u{0561}\u{0576}\u{0584}", 21, 1, None),
    Among("\u{0561}\u{0581}\u{0561}\u{0576}\u{0584}", 22, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{056B}\u{0576}\u{0584}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{056B}\u{0576}\u{0584}", -1, 1, None),
    Among("\u{0565}\u{0581}\u{056B}\u{0576}\u{0584}", -1, 1, None),
    Among("\u{057E}\u{0565}\u{0581}\u{056B}\u{0576}\u{0584}", 26, 1, None),
    Among("\u{0561}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{0561}", 28, 1, None),
    Among("\u{0565}\u{0581}\u{0561}", 28, 1, None),
    Among("\u{057E}\u{0565}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{056B}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{056B}", -1, 1, None),
    Among("\u{0565}\u{0581}\u{056B}", -1, 1, None),
    Among("\u{057E}\u{0565}\u{0581}\u{056B}", 34, 1, None),
    Among("\u{0561}\u{056C}", -1, 1, None),
    Among("\u{0568}\u{0561}\u{056C}", 36, 1, None),
    Among("\u{0561}\u{0581}\u{0576}\u{0561}\u{056C}", 36, 1, None),
    Among("\u{0561}\u{0576}\u{0561}\u{056C}", 36, 1, None),
    Among("\u{0565}\u{0576}\u{0561}\u{056C}", 36, 1, None),
    Among("\u{0565}\u{056C}", -1, 1, None),
    Among("\u{0568}\u{0565}\u{056C}", 41, 1, None),
    Among("\u{0576}\u{0565}\u{056C}", 41, 1, None),
    Among("\u{0581}\u{0576}\u{0565}\u{056C}", 43, 1, None),
    Among("\u{0565}\u{0581}\u{0576}\u{0565}\u{056C}", 44, 1, None),
    Among("\u{0579}\u{0565}\u{056C}", 41, 1, None),
    Among("\u{057E}\u{0565}\u{056C}", 41, 1, None),
    Among("\u{0561}\u{0581}\u{057E}\u{0565}\u{056C}", 47, 1, None),
    Among("\u{0565}\u{0581}\u{057E}\u{0565}\u{056C}", 47, 1, None),
    Among("\u{057F}\u{0565}\u{056C}", 41, 1, None),
    Among("\u{0561}\u{057F}\u{0565}\u{056C}", 50, 1, None),
    Among("\u{0578}\u{057F}\u{0565}\u{056C}", 50, 1, None),
    Among("\u{056F}\u{0578}\u{057F}\u{0565}\u{056C}", 52, 1, None),
    Among("\u{057E}\u{0561}\u{056E}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0574}", -1, 1, None),
    Among("\u{057E}\u{0578}\u{0582}\u{0574}", 55, 1, None),
    Among("\u{0561}\u{0576}", -1, 1, None),
    Among("\u{0581}\u{0561}\u{0576}", 57, 1, None),
    Among("\u{0561}\u{0581}\u{0561}\u{0576}", 58, 1, None),
    Among("\u{0561}\u{0581}\u{0580}\u{056B}\u{0576}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{056B}\u{0576}", -1, 1, None),
    Among("\u{0565}\u{0581}\u{056B}\u{0576}", -1, 1, None),
    Among("\u{057E}\u{0565}\u{0581}\u{056B}\u{0576}", 62, 1, None),
    Among("\u{0561}\u{056C}\u{056B}\u{057D}", -1, 1, None),
    Among("\u{0565}\u{056C}\u{056B}\u{057D}", -1, 1, None),
    Among("\u{0561}\u{057E}", -1, 1, None),
    Among("\u{0561}\u{0581}\u{0561}\u{057E}", 66, 1, None),
    Among("\u{0565}\u{0581}\u{0561}\u{057E}", 66, 1, None),
    Among("\u{0561}\u{056C}\u{0578}\u{057E}", -1, 1, None),
    Among("\u{0565}\u{056C}\u{0578}\u{057E}", -1, 1, None),
];

static A_2: &'static [Among<Context>; 40] = &[
    Among("\u{0563}\u{0561}\u{0580}", -1, 1, None),
    Among("\u{057E}\u{0578}\u{0580}", -1, 1, None),
    Among("\u{0561}\u{057E}\u{0578}\u{0580}", 1, 1, None),
    Among("\u{0561}\u{0576}\u{0585}\u{0581}", -1, 1, None),
    Among("\u{0578}\u{0581}", -1, 1, None),
    Among("\u{0578}\u{0582}", -1, 1, None),
    Among("\u{0584}", -1, 1, None),
    Among("\u{0561}\u{0580}\u{0584}", 6, 1, None),
    Among("\u{0579}\u{0565}\u{0584}", 6, 1, None),
    Among("\u{056B}\u{0584}", 6, 1, None),
    Among("\u{0561}\u{056C}\u{056B}\u{0584}", 9, 1, None),
    Among("\u{0561}\u{0576}\u{056B}\u{0584}", 9, 1, None),
    Among("\u{057E}\u{0561}\u{056E}\u{0584}", 6, 1, None),
    Among("\u{0578}\u{0582}\u{0575}\u{0584}", 6, 1, None),
    Among("\u{0578}\u{0582}\u{0576}\u{0584}", 6, 1, None),
    Among("\u{0574}\u{0578}\u{0582}\u{0576}\u{0584}", 14, 1, None),
    Among("\u{0565}\u{0576}\u{0584}", 6, 1, None),
    Among("\u{0578}\u{0576}\u{0584}", 6, 1, None),
    Among("\u{056B}\u{0579}\u{0584}", 6, 1, None),
    Among("\u{0578}\u{0580}\u{0564}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0575}\u{0569}", -1, 1, None),
    Among("\u{0581}\u{056B}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0570}\u{056B}", -1, 1, None),
    Among("\u{056B}\u{056C}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{056F}", -1, 1, None),
    Among("\u{0561}\u{056F}", -1, 1, None),
    Among("\u{0575}\u{0561}\u{056F}", 25, 1, None),
    Among("\u{0561}\u{0576}\u{0561}\u{056F}", 25, 1, None),
    Among("\u{056B}\u{056F}", -1, 1, None),
    Among("\u{0575}\u{0578}\u{0582}\u{0576}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0578}\u{0582}\u{0576}", 29, 1, None),
    Among("\u{0561}\u{0576}", -1, 1, None),
    Among("\u{0561}\u{0580}\u{0561}\u{0576}", 31, 1, None),
    Among("\u{057A}\u{0561}\u{0576}", 31, 1, None),
    Among("\u{057D}\u{057F}\u{0561}\u{0576}", 31, 1, None),
    Among("\u{0565}\u{0572}\u{0567}\u{0576}", -1, 1, None),
    Among("\u{0561}\u{056E}\u{0578}", -1, 1, None),
    Among("\u{056B}\u{0579}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{057D}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{057D}\u{057F}", -1, 1, None),
];

static A_3: &'static [Among<Context>; 57] = &[
    Among("\u{0565}\u{0580}", -1, 1, None),
    Among("\u{0576}\u{0565}\u{0580}", 0, 1, None),
    Among("\u{0581}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0581}", 2, 1, None),
    Among("\u{056B}\u{0581}", 2, 1, None),
    Among("\u{0565}\u{0580}\u{056B}\u{0581}", 4, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{056B}\u{0581}", 5, 1, None),
    Among("\u{0581}\u{056B}\u{0581}", 4, 1, None),
    Among("\u{057E}\u{0561}\u{0576}\u{056B}\u{0581}", 4, 1, None),
    Among("\u{0578}\u{057B}\u{056B}\u{0581}", 4, 1, None),
    Among("\u{057E}\u{056B}\u{0581}", 4, 1, None),
    Among("\u{0578}\u{0581}", 2, 1, None),
    Among("\u{057D}\u{0561}", -1, 1, None),
    Among("\u{057E}\u{0561}", -1, 1, None),
    Among("\u{0561}\u{0574}\u{0562}", -1, 1, None),
    Among("\u{0564}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0564}", 15, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{0564}", 16, 1, None),
    Among("\u{0578}\u{0582}\u{0564}", 15, 1, None),
    Among("\u{0561}\u{0576}\u{0564}", 15, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0561}\u{0576}\u{0564}", 19, 1, None),
    Among("\u{057E}\u{0561}\u{0576}\u{0564}", 19, 1, None),
    Among("\u{0578}\u{057B}\u{0564}", 15, 1, None),
    Among("\u{0568}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0568}", 23, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{0568}", 24, 1, None),
    Among("\u{0561}\u{0576}\u{0568}", 23, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0561}\u{0576}\u{0568}", 26, 1, None),
    Among("\u{057E}\u{0561}\u{0576}\u{0568}", 26, 1, None),
    Among("\u{0578}\u{057B}\u{0568}", 23, 1, None),
    Among("\u{056B}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{056B}", 30, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{056B}", 31, 1, None),
    Among("\u{057E}\u{056B}", 30, 1, None),
    Among("\u{0565}\u{0580}\u{0578}\u{0582}\u{0574}", -1, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{0578}\u{0582}\u{0574}", 34, 1, None),
    Among("\u{0561}\u{0576}\u{0578}\u{0582}\u{0574}", -1, 1, None),
    Among("\u{0576}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0576}", 37, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{0576}", 38, 1, None),
    Among("\u{0578}\u{0582}\u{0576}", 37, 1, None),
    Among("\u{0561}\u{0576}", 37, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0561}\u{0576}", 41, 1, None),
    Among("\u{057E}\u{0561}\u{0576}", 41, 1, None),
    Among("\u{056B}\u{0576}", 37, 1, None),
    Among("\u{0565}\u{0580}\u{056B}\u{0576}", 44, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{056B}\u{0576}", 45, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0561}\u{0576}\u{0576}", 37, 1, None),
    Among("\u{0578}\u{057B}", -1, 1, None),
    Among("\u{0578}\u{0582}\u{0569}\u{0575}\u{0561}\u{0576}\u{057D}", -1, 1, None),
    Among("\u{057E}\u{0561}\u{0576}\u{057D}", -1, 1, None),
    Among("\u{0578}\u{057B}\u{057D}", -1, 1, None),
    Among("\u{0578}\u{057E}", -1, 1, None),
    Among("\u{0565}\u{0580}\u{0578}\u{057E}", 52, 1, None),
    Among("\u{0576}\u{0565}\u{0580}\u{0578}\u{057E}", 53, 1, None),
    Among("\u{0561}\u{0576}\u{0578}\u{057E}", 52, 1, None),
    Among("\u{057E}\u{0578}\u{057E}", 52, 1, None),
];

static G_v: &'static [u8; 5] = &[209, 4, 128, 0, 18];

#[derive(Clone)]
struct Context {
    i_p2: i32,
    i_pV: i32,
}

fn r_mark_regions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_pV = env.limit as i32;
    context.i_p2 = env.limit as i32;
    let v_1 = env.cursor;
    'lab0: loop {
        'golab1: loop {
            'lab2: loop {
                if !env.in_grouping(G_v, 1377, 1413) {
                    break 'lab2;
                }
                break 'golab1;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        context.i_pV = env.cursor as i32;
        'golab3: loop {
            'lab4: loop {
                if !env.out_grouping(G_v, 1377, 1413) {
                    break 'lab4;
                }
                break 'golab3;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        'golab5: loop {
            'lab6: loop {
                if !env.in_grouping(G_v, 1377, 1413) {
                    break 'lab6;
                }
                break 'golab5;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        'golab7: loop {
            'lab8: loop {
                if !env.out_grouping(G_v, 1377, 1413) {
                    break 'lab8;
                }
                break 'golab7;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        context.i_p2 = env.cursor as i32;
        break 'lab0;
    }
    env.cursor = v_1;
    return true;
}

fn r_R2(env: &mut SnowballEnv, context: &mut Context) -> bool {
    if !(context.i_p2 <= env.cursor as i32){
        return false;
    }
    return true;
}

fn r_adjective(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_0, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_verb(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_1, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_noun(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_2, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_ending(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_3, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !r_R2(env, context) {
        return false;
    }
    if !env.slice_del() {
        return false;
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context {
        i_p2: 0,
        i_pV: 0,
    };
    r_mark_regions(env, context);
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    if env.cursor < context.i_pV as usize {
        return false;
    }
    let v_3 = env.limit_backward;
    env.limit_backward = context.i_pV as usize;
    let v_4 = env.limit - env.cursor;
    r_ending(env, context);
    env.cursor = env.limit - v_4;
    let v_5 = env.limit - env.cursor;
    r_verb(env, context);
    env.cursor = env.limit - v_5;
    let v_6 = env.limit - env.cursor;
    r_adjective(env, context);
    env.cursor = env.limit - v_6;
    let v_7 = env.limit - env.cursor;
    r_noun(env, context);
    env.cursor = env.limit - v_7;
    env.limit_backward = v_3;
    env.cursor = env.limit_backward;
    return true;
}
